/*
        Select a categorical variable and a numeric variable and form the key-value pair and
        create a pairRDD called `population`.
*/

val csv = sc.textFile("input/OECDGas.csv")
val rowsWithHeader = csv.map(line => line.split(",").map(_.trim)).map(row => (row(1), row(3)))
val header = rowsWithHeader.first
val population = rowsWithHeader.filter(_._1 != header._1).map(row => (row._1.replaceAll("\"", ""), row._2.toDouble))
val populationGrouped = population.groupByKey()

/* 

Output populationGrouped

(Belgium,CompactBuffer(4.16401597, 4.124355641, 4.075961692, 4.001266072, 3.994375414, 3.9515307039, 3.8205378359, 3.9068782151, 3.8286653779, 3.8546012139, 3.870391622, 3.8722450341, 3.905401926, 3.8959956699, 3.8182304581, 3.877778414, 3.8641455001, 3.854311239, 3.842741783)) 

(UK,CompactBuffer(4.1002442839, 4.0886358, 4.0480509119, 3.9852710359, 3.976781186, 3.968675694, 3.957212164, 3.9436308491, 3.9532027179, 3.948058368, 3.9797051949, 3.9836534009, 3.992756786, 3.995364122, 3.966961453, 3.9125838579, 3.962305336, 3.945553345, 4.0003742149)) 

(Canada,CompactBuffer(4.8552384411, 4.8265553731, 4.8505325093, 4.8380800488, 4.8397604783, 4.850827846, 4.871024855, 4.8524989572, 4.868782423, 4.8644326333, 4.8995700246, 4.8950745608, 4.8893020193, 4.89969379, 4.8915906557, 4.888471343, 4.8373587579, 4.810991519, 4.855845841)) 

(Greece,CompactBuffer(5.0374055349, 5.3814948731, 5.1880716432, 5.083411848, 5.1786270248, 5.0151124361, 5.048395696, 4.9757754289, 4.9441602588, 4.8947734887, 4.8518237449, 4.8118147383, 4.7957087158, 4.7685820877, 4.6278067713, 4.580961511, 4.47995576, 4.484616757, 4.546399614)) 

(Japan,CompactBuffer(5.9952865559, 5.7584836101, 5.6419150489, 5.5080817012, 5.275327848, 5.125850803, 5.0008214407, 4.8548612373, 4.6846663526, 4.518289907, 4.401596952, 4.305623621, 4.2229757, 4.0938837331, 4.007963901, 3.995984493, 3.9881620001, 3.9646719111, 3.9487463871)) 

(France,CompactBuffer(3.9077042329, 3.8856225131, 3.823666088, 3.788996565, 3.7670843699, 3.760583648, 3.7495348571, 3.7686207529, 3.7782304139, 3.773460001, 3.801582653, 3.8259622251, 3.8466772421, 3.8849943329, 3.807994935, 3.8085488721, 3.9081160121, 3.812500373, 3.7888825619)) 

(Netherlands,CompactBuffer(4.6462680045, 4.559839938, 4.471717068, 4.377686978, 4.31956339, 4.233001576, 4.168016513, 4.119154995, 4.0707346969, 3.987689339, 3.956407876, 3.9478037431, 3.915296331, 3.8804785129, 3.7113837231, 3.718466264, 3.7836345681, 3.7766816581, 3.8825941949)) 

(Italy,CompactBuffer(4.050728238, 4.0452481041, 4.0289989679, 3.963086271, 3.936324254, 3.8749851811, 3.8227352401, 3.7858083619, 3.7639029799, 3.737389284, 3.706871673, 3.6482050719, 3.629243426, 3.6522633939, 3.4994699, 3.5156795149, 3.4276288189, 3.3802089569, 3.3945044428)) 

(Sweden,CompactBuffer(4.063010036, 4.061869959, 4.0064390159, 4.00276563, 4.024858515, 4.015463106, 4.0025573741, 3.9973460479, 3.997584757, 3.9917150449, 3.989372472, 3.982061858, 3.9800657581, 4.0305604061, 3.913159154, 3.9738404359, 3.983996505, 4.0310109309, 4.067373445)) 

(Switzerland,CompactBuffer(4.397621493, 4.441329648, 4.2871473959, 4.312484529, 4.3134274369, 4.288713915, 4.2663516041, 4.265918883, 4.2177878429, 4.211290089, 4.22529671, 4.280697003, 4.2591593359, 4.2298161621, 4.166363739, 4.120567757, 4.0795721801, 4.100533339, 4.050047696)) 

(Spain,CompactBuffer(4.7494091723, 4.589239364, 4.429087629, 4.346497214, 4.300577007, 4.217208979, 4.113780911, 4.086322459, 4.0442530621, 3.9941031169, 3.96604596, 3.9073442129, 3.8912244911, 3.912811545, 3.768565146, 3.7524488659, 3.7108746111, 3.6507346971, 3.6204438709)) 

(Norway,CompactBuffer(4.43504067, 4.33271925, 4.2342411029, 4.216189342, 4.164351876, 4.131633441, 4.0846073869, 4.0643140609, 4.103864323, 4.0868228049, 4.0888057159, 4.078931746, 4.077257431, 4.0613489569, 3.9603309711, 3.9960249669, 3.978209728, 3.988515537, 4.0024867129)) 

(Denmark,CompactBuffer(4.50198595, 4.4828459381, 4.385448561, 4.3539971901, 4.326435619, 4.249453555, 4.2336434839, 4.2034662751, 4.161687403, 4.173561413, 4.128807176, 4.1031462929, 4.082807844, 4.137437795, 4.000460803, 4.0330145629, 4.0077389471, 4.005290418, 4.0366010839)) 

(Germany,CompactBuffer(3.916953172, 3.885345397, 3.8714840411, 3.848782399, 3.868992975, 3.861049164, 3.8807406531, 3.875031869, 3.8893615239, 3.8991846811, 3.9025204189, 3.932104258, 3.9324021681, 3.924155679, 3.8882123569, 3.922028648, 3.8964692669, 3.8956900509, 3.8838785591)) 

(Turkey,CompactBuffer(6.1295528491, 6.106212679, 6.0845870211, 6.0751291349, 6.064600869, 5.8230458949, 6.156644407, 6.044478582, 6.0765946269, 5.7207051419, 5.72210507, 5.6696463189, 5.5788213319, 5.68647036, 5.42772844, 5.4267771741, 5.312929193, 5.313462422, 5.1412554768)) 

(USA,CompactBuffer(4.8239645123, 4.7963170698, 4.7989365652, 4.7878951522, 4.8082735727, 4.8059545113, 4.8075305603, 4.8008834761, 4.8341417653, 4.841382713, 4.8484842122, 4.8602864749, 4.8540732646, 4.8463745073, 4.7986259444, 4.8049322352, 4.8148907167, 4.811032467, 4.8184539683)) 

(Ireland,CompactBuffer(4.270420603, 4.2552393669, 4.2084346371, 4.176695597, 4.186242773, 4.164895673, 4.1682144109, 4.188989564, 4.18111984, 4.208612656, 4.2499445181, 4.267117754, 4.270767878, 4.253827008, 4.3255853241, 4.248218349, 4.2211462271, 4.2415507701, 4.198610729)) 

(Austria,CompactBuffer(4.173244195, 4.1009891049, 4.0731765511, 4.0595091239, 4.037688787, 4.033983285, 4.0475365589, 4.0529106939, 4.045507048, 4.0463547891, 4.0808876731, 4.106720494, 4.128017777, 4.199380561, 4.018495372, 4.0290180751, 3.985411744, 3.9316759431, 3.922749583))
*/


/*
        Compute the mean mpg and variance for each category
*/

def mean(i: Iterable[Double]) = i.sum.toDouble/i.count(_=>true)

def variance(i: Iterable[Double]) = { 
  val m = mean(i)
  val b = i.map(x => math.pow(x - m, 2))
  b.sum / (i.count(_=>true) - 1)
}

val populationMeanVariance = populationGrouped.map(x => (x._1, (mean(x._2), variance(x._2))))

/*
Output populationMeanVariance
(Belgium,(3.922285777994736,0.01068988288751539))
(UK,(3.984685301121053,0.0022923865371913803))
(Greece,(4.878678838552632,0.0648590743185864))
(France,(3.8151980341578944,0.0024864437484165055))
(Canada,(4.862401688231579,6.855897774484088E-4))
(Italy,(3.729646425278948,0.04840672040446999))
(Japan,(4.6996417475315795,0.46801629855522286))
(Switzerland,(4.237585618889474,0.010360680827250784))
(Netherlands,(4.0803378615578945,0.08204032211161338))
(Spain,(4.055314332331579,0.10046861257324448))
(Sweden,(4.00605528688421,0.001324687408286028))
(Germany,(3.893388804263159,5.711378082742189E-4))
(Norway,(4.109773474910526,0.015145895732479184))
(USA,(4.819075457305264,4.7952346135987927E-4))
(Denmark,(4.189885805842105,0.02502637944362702))
(Turkey,(5.766355104868421,0.10825015072764708))
(Ireland,(4.225559667278948,0.0019095971230031405))
(Austria,(4.056487229426317,0.004802409919885539))
*/

/*
        Create the sample for bootstrapping (25% of the population without replacement)
*/
val sample = population.sample(false, 0.25)

/*
        Do 1000 times
*/
var arrSample: Array[(String, (Double, Double))] = Array.empty[(String, (Double, Double))]

// Loop to resample and compute mean and variance
for (i <- 1 to 1000) {
  // Create a resampled dataset by sampling with replacement
  val resampledDatasets = sample.sample(true, 1)
  
  // Compute the mean and variance for each category
  val resampledDatasetsGrouped = resampledDatasets.groupByKey()
  val sampleMeanVariance = resampledDatasetsGrouped.map(x => (x._1, (mean(x._2), variance(x._2))))
  
  // Add the mean and variance values to the arrSample array
  arrSample = arrSample ++ sampleMeanVariance.collect()
}

/*
        Get the average and display the result
*/
val arrSampleAvg = arrSample.map(x => (x._1, (x._2._1 / 1000, x._2._2 / 1000)))
import org.apache.spark.rdd.RDD
val rddSampleAvg: RDD[(String, (Double, Double))] = sc.parallelize(arrSampleAvg)
val rddSampleAvgReduced = rddSampleAvg.reduceByKey((a, b) => (a._1 + b._1, a._2 + b._2))

/*
Output rddSampleAvgReduced
rddSampleAvgReduced.foreach(println)
(UK,(0.019768711544016666,9.220254266088629E-6))
(Canada,(0.02430461746797833,NaN))
(Japan,(0.02391091712566666,0.0011757506800011814))
(Netherlands,(0.0077651883898,NaN))
(Belgium,(0.019290339729573648,1.0995688090796729E-5))
(Greece,(0.02502674337101738,2.4159596010700678E-4))
(Italy,(0.019389367803463772,7.860166435508822E-5))
(France,(0.019213158658596668,NaN))
(Switzerland,(0.02093871819807,3.700918569863251E-5))
(Spain,(0.0199611105757375,2.7011790426646076E-4))
(Germany,(0.019583512964636188,1.0132813949923073E-6))
(USA,(0.023987891705271665,3.38888609450228E-7))
(Ireland,(0.021009070179110002,7.892811726628381E-6))
(Austria,(0.016211642775600003,NaN))
(Norway,(0.020405669586653637,NaN))
(Denmark,(0.021254182447,NaN))
(Turkey,(0.02793915211577333,3.4572235334217634E-4))
*/