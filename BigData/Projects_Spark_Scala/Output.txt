SLF4J: Found binding in [jar:file:/usr/lib/flume-ng/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/usr/lib/parquet/lib/slf4j-log4j12-1.7.5.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/usr/lib/avro/avro-tools-1.7.6-cdh5.12.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 1.6.0
      /_/

Using Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67)
Type in expressions to have them evaluated.
Type :help for more information.
23/03/20 20:19:34 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Spark context available as sc (master = local[*], app id = local-1679368788992).
23/03/20 20:20:07 WARN shortcircuit.DomainSocketFactory: The short-circuit local reads feature cannot be used because libhadoop cannot be loaded.
SQL context available as sqlContext.
Loading finalProject.scala...
csv: org.apache.spark.rdd.RDD[String] = OECDGas.csv MapPartitionsRDD[1] at textFile at <console>:27
rowsWithHeader: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[3] at map at <console>:29
header: (String, String) = ("country","gas")
population: org.apache.spark.rdd.RDD[(String, Double)] = MapPartitionsRDD[5] at map at <console>:33
Step 2:
(Austria,4.173244195)
(Austria,4.1009891049)
(Austria,4.0731765511)
(Austria,4.0595091239)
(Austria,4.037688787)
(Austria,4.033983285)
(Austria,4.0475365589)
(Austria,4.0529106939)
(Austria,4.045507048)
(Austria,4.0463547891)
(Austria,4.0808876731)
(Austria,4.106720494)
(Austria,4.128017777)
(Austria,4.199380561)
(Austria,4.018495372)
(Austria,4.0290180751)
(Austria,3.985411744)
(Austria,3.9316759431)
(Austria,3.922749583)
(Belgium,4.16401597)
(Belgium,4.124355641)
(Belgium,4.075961692)
(Belgium,4.001266072)
(Belgium,3.994375414)
(Belgium,3.9515307039)
(Belgium,3.8205378359)
(Belgium,3.9068782151)
(Belgium,3.8286653779)
(Belgium,3.8546012139)
(Belgium,3.870391622)
(Belgium,3.8722450341)
(Belgium,3.905401926)
(Belgium,3.8959956699)
(Belgium,3.8182304581)
(Belgium,3.877778414)
(Belgium,3.8641455001)
(Belgium,3.854311239)
(Belgium,3.842741783)
(Canada,4.8552384411)
(Canada,4.8265553731)
(Canada,4.8505325093)
(Canada,4.8380800488)
(Canada,4.8397604783)
(Canada,4.850827846)
(Canada,4.871024855)
(Canada,4.8524989572)
(Canada,4.868782423)
(Canada,4.8644326333)
(Canada,4.8995700246)
(Canada,4.8950745608)
(Canada,4.8893020193)
(Canada,4.89969379)
(Canada,4.8915906557)
(Canada,4.888471343)
(Canada,4.8373587579)
(Canada,4.810991519)
(Canada,4.855845841)
(Denmark,4.50198595)
(Denmark,4.4828459381)
(Denmark,4.385448561)
(Denmark,4.3539971901)
(Denmark,4.326435619)
(Denmark,4.249453555)
(Denmark,4.2336434839)
(Denmark,4.2034662751)
(Denmark,4.161687403)
(Denmark,4.173561413)
(Denmark,4.128807176)
(Denmark,4.1031462929)
(Denmark,4.082807844)
(Denmark,4.137437795)
(Denmark,4.000460803)
(Denmark,4.0330145629)
(Denmark,4.0077389471)
(Denmark,4.005290418)
(Denmark,4.0366010839)
(France,3.9077042329)
(France,3.8856225131)
(France,3.823666088)
(France,3.788996565)
(France,3.7670843699)
(France,3.760583648)
(France,3.7495348571)
(France,3.7686207529)
(France,3.7782304139)
(France,3.773460001)
(France,3.801582653)
(France,3.8259622251)
(France,3.8466772421)
(France,3.8849943329)
(France,3.807994935)
(France,3.8085488721)
(France,3.9081160121)
(France,3.812500373)
(France,3.7888825619)
(Germany,3.916953172)
(Germany,3.885345397)
(Germany,3.8714840411)
(Germany,3.848782399)
(Germany,3.868992975)
(Germany,3.861049164)
(Germany,3.8807406531)
(Germany,3.875031869)
(Germany,3.8893615239)
(Germany,3.8991846811)
(Germany,3.9025204189)
(Germany,3.932104258)
(Germany,3.9324021681)
(Germany,3.924155679)
(Germany,3.8882123569)
(Germany,3.922028648)
(Germany,3.8964692669)
(Germany,3.8956900509)
(Germany,3.8838785591)
(Greece,5.0374055349)
(Greece,5.3814948731)
(Greece,5.1880716432)
(Greece,5.083411848)
(Greece,5.1786270248)
(Greece,5.0151124361)
(Greece,5.048395696)
(Greece,4.9757754289)
(Greece,4.9441602588)
(Greece,4.8947734887)
(Greece,4.8518237449)
(Greece,4.8118147383)
(Greece,4.7957087158)
(Greece,4.7685820877)
(Greece,4.6278067713)
(Greece,4.580961511)
(Greece,4.47995576)
(Greece,4.484616757)
(Greece,4.546399614)
(Ireland,4.270420603)
(Ireland,4.2552393669)
(Ireland,4.2084346371)
(Ireland,4.176695597)
(Ireland,4.186242773)
(Ireland,4.164895673)
(Ireland,4.1682144109)
(Ireland,4.188989564)
(Ireland,4.18111984)
(Ireland,4.208612656)
(Ireland,4.2499445181)
(Ireland,4.267117754)
(Ireland,4.270767878)
(Ireland,4.253827008)
(Ireland,4.3255853241)
(Ireland,4.248218349)
(Ireland,4.2211462271)
(Ireland,4.2415507701)
(Ireland,4.198610729)
(Italy,4.050728238)
(Italy,4.0452481041)
(Italy,4.0289989679)
(Italy,3.963086271)
(Italy,3.936324254)
(Italy,3.8749851811)
(Italy,3.8227352401)
(Italy,3.7858083619)
(Italy,3.7639029799)
(Italy,3.737389284)
(Italy,3.706871673)
(Italy,3.6482050719)
(Italy,3.629243426)
(Italy,3.6522633939)
(Italy,3.4994699)
(Italy,3.5156795149)
(Italy,3.4276288189)
(Italy,3.3802089569)
(Italy,3.3945044428)
(Japan,5.9952865559)
(Japan,5.7584836101)
(Japan,5.6419150489)
(Japan,5.5080817012)
(Japan,5.275327848)
(Japan,5.125850803)
(Japan,5.0008214407)
(Japan,4.8548612373)
(Japan,4.6846663526)
(Japan,4.518289907)
(Japan,4.401596952)
(Japan,4.305623621)
(Japan,4.2229757)
(Japan,4.0938837331)
(Japan,4.007963901)
(Japan,3.995984493)
(Japan,3.9881620001)
(Japan,3.9646719111)
(Japan,3.9487463871)
(Netherlands,4.6462680045)
(Netherlands,4.559839938)
(Netherlands,4.471717068)
(Netherlands,4.377686978)
(Netherlands,4.31956339)
(Netherlands,4.233001576)
(Netherlands,4.168016513)
(Netherlands,4.119154995)
(Netherlands,4.0707346969)
(Netherlands,3.987689339)
(Netherlands,3.956407876)
(Netherlands,3.9478037431)
(Netherlands,3.915296331)
(Netherlands,3.8804785129)
(Netherlands,3.7113837231)
(Netherlands,3.718466264)
(Netherlands,3.7836345681)
(Netherlands,3.7766816581)
(Netherlands,3.8825941949)
(Norway,4.43504067)
(Norway,4.33271925)
(Norway,4.2342411029)
(Norway,4.216189342)
(Norway,4.164351876)
(Norway,4.131633441)
(Norway,4.0846073869)
(Norway,4.0643140609)
(Norway,4.103864323)
(Norway,4.0868228049)
(Norway,4.0888057159)
(Norway,4.078931746)
(Norway,4.077257431)
(Norway,4.0613489569)
(Norway,3.9603309711)
(Norway,3.9960249669)
(Norway,3.978209728)
(Norway,3.988515537)
(Norway,4.0024867129)
(Spain,4.7494091723)
(Spain,4.589239364)
(Spain,4.429087629)
(Spain,4.346497214)
(Spain,4.300577007)
(Spain,4.217208979)
(Spain,4.113780911)
(Spain,4.086322459)
(Spain,4.0442530621)
(Spain,3.9941031169)
(Spain,3.96604596)
(Spain,3.9073442129)
(Spain,3.8912244911)
(Spain,3.912811545)
(Spain,3.768565146)
(Spain,3.7524488659)
(Spain,3.7108746111)
(Spain,3.6507346971)
(Spain,3.6204438709)
(Sweden,4.063010036)
(Sweden,4.061869959)
(Sweden,4.0064390159)
(Sweden,4.00276563)
(Sweden,4.024858515)
(Sweden,4.015463106)
(Sweden,4.0025573741)
(Sweden,3.9973460479)
(Sweden,3.997584757)
(Sweden,3.9917150449)
(Sweden,3.989372472)
(Sweden,3.982061858)
(Sweden,3.9800657581)
(Sweden,4.0305604061)
(Sweden,3.913159154)
(Sweden,3.9738404359)
(Sweden,3.983996505)
(Sweden,4.0310109309)
(Sweden,4.067373445)
(Switzerland,4.397621493)
(Switzerland,4.441329648)
(Switzerland,4.2871473959)
(Switzerland,4.312484529)
(Switzerland,4.3134274369)
(Switzerland,4.288713915)
(Switzerland,4.2663516041)
(Switzerland,4.265918883)
(Switzerland,4.2177878429)
(Switzerland,4.211290089)
(Switzerland,4.22529671)
(Switzerland,4.280697003)
(Switzerland,4.2591593359)
(Switzerland,4.2298161621)
(Switzerland,4.166363739)
(Switzerland,4.120567757)
(Switzerland,4.0795721801)
(Switzerland,4.100533339)
(Switzerland,4.050047696)
(Turkey,6.1295528491)
(Turkey,6.106212679)
(Turkey,6.0845870211)
(Turkey,6.0751291349)
(Turkey,6.064600869)
(Turkey,5.8230458949)
(Turkey,6.156644407)
(Turkey,6.044478582)
(Turkey,6.0765946269)
(Turkey,5.7207051419)
(Turkey,5.72210507)
(Turkey,5.6696463189)
(Turkey,5.5788213319)
(Turkey,5.68647036)
(Turkey,5.42772844)
(Turkey,5.4267771741)
(Turkey,5.312929193)
(Turkey,5.313462422)
(Turkey,5.1412554768)
(UK,4.1002442839)
(UK,4.0886358)
(UK,4.0480509119)
(UK,3.9852710359)
(UK,3.976781186)
(UK,3.968675694)
(UK,3.957212164)
(UK,3.9436308491)
(UK,3.9532027179)
(UK,3.948058368)
(UK,3.9797051949)
(UK,3.9836534009)
(UK,3.992756786)
(UK,3.995364122)
(UK,3.966961453)
(UK,3.9125838579)
(UK,3.962305336)
(UK,3.945553345)
(UK,4.0003742149)
(USA,4.8239645123)
(USA,4.7963170698)
(USA,4.7989365652)
(USA,4.7878951522)
(USA,4.8082735727)
(USA,4.8059545113)
(USA,4.8075305603)
(USA,4.8008834761)
(USA,4.8341417653)
(USA,4.841382713)
(USA,4.8484842122)
(USA,4.8602864749)
(USA,4.8540732646)
(USA,4.8463745073)
(USA,4.7986259444)
(USA,4.8049322352)
(USA,4.8148907167)
(USA,4.811032467)
(USA,4.8184539683)
populationGrouped: org.apache.spark.rdd.RDD[(String, Iterable[Double])] = ShuffledRDD[6] at groupByKey at <console>:35
mean: (i: Iterable[Double])Double
variance: (i: Iterable[Double])Double
populationMeanVariance: org.apache.spark.rdd.RDD[(String, (Double, Double))] = MapPartitionsRDD[7] at map at <console>:41
Step 3:
(UK,(3.984685301121053,0.0021717346141813076))
(Belgium,(3.922285777994736,0.010127257472383001))
(Canada,(4.862401688231579,6.495061049511242E-4))
(Japan,(4.6996417475315795,0.4433838617891585))
(Greece,(4.878678838552632,0.06144543882813448))
(France,(3.8151980341578944,0.002355578287973532))
(Italy,(3.729646425278948,0.045858998277918936))
(Switzerland,(4.237585618889474,0.009815381836342847))
(Netherlands,(4.0803378615578945,0.07772241042152847))
(Germany,(3.893388804263159,5.410779236282074E-4))
(USA,(4.819075457305264,4.542853844462014E-4))
(Spain,(4.055314332331579,0.09518079085886319))
(Ireland,(4.225559667278948,0.0018090920112661332))
(Sweden,(4.00605528688421,0.001254967018376237))
(Norway,(4.109773474910526,0.014348743325506596))
(Denmark,(4.189885805842105,0.023709201578172964))
(Turkey,(5.766355104868421,0.1025527743735604))
(Austria,(4.056487229426317,0.004549651503049458))
sample: org.apache.spark.rdd.RDD[(String, Double)] = PartitionwiseSampledRDD[8] at sample at <console>:35
Step 4:
(Austria,4.1009891049)
(Austria,4.037688787)
(Austria,4.033983285)
(Austria,4.0529106939)
(Austria,3.922749583)
(Belgium,4.124355641)
(Belgium,3.9068782151)
(Belgium,3.8286653779)
(Belgium,3.8959956699)
(Canada,4.850827846)
(Canada,4.8893020193)
(Denmark,4.249453555)
(Denmark,4.173561413)
(Denmark,4.128807176)
(Denmark,4.137437795)
(Denmark,4.0077389471)
(Denmark,4.005290418)
(France,3.760583648)
(France,3.8259622251)
(France,3.8085488721)
(Germany,3.848782399)
(Germany,3.868992975)
(Germany,3.9025204189)
(Germany,3.8838785591)
(Greece,5.1880716432)
(Greece,5.0151124361)
(Greece,4.6278067713)
(Ireland,4.2084346371)
(Ireland,4.186242773)
(Ireland,4.18111984)
(Ireland,4.267117754)
(Ireland,4.2211462271)
(Italy,3.7858083619)
(Italy,3.7639029799)
(Italy,3.629243426)
(Italy,3.4276288189)
(Italy,3.3802089569)
(Japan,5.6419150489)
(Japan,5.125850803)
(Japan,4.401596952)
(Japan,4.2229757)
(Japan,3.9646719111)
(Netherlands,4.6462680045)
(Netherlands,4.559839938)
(Netherlands,3.915296331)
(Netherlands,3.8804785129)
(Netherlands,3.7766816581)
(Norway,4.33271925)
(Norway,4.103864323)
(Norway,4.078931746)
(Norway,3.978209728)
(Spain,4.346497214)
(Spain,3.96604596)
(Spain,3.9073442129)
(Spain,3.7108746111)
(Sweden,4.0064390159)
(Sweden,4.024858515)
(Sweden,3.982061858)
(Sweden,4.0305604061)
(Switzerland,4.397621493)
(Switzerland,4.288713915)
(Switzerland,4.050047696)
(Turkey,6.064600869)
(Turkey,6.156644407)
(Turkey,5.72210507)
(Turkey,5.6696463189)
(Turkey,5.68647036)
(Turkey,5.312929193)
(Turkey,5.1412554768)
(UK,3.9852710359)
(UK,3.976781186)
(UK,3.968675694)
(UK,3.948058368)
(UK,3.9797051949)
(UK,3.995364122)
(UK,3.966961453)
(USA,4.8082735727)
(USA,4.8341417653)
(USA,4.8484842122)
(USA,4.8463745073)
(USA,4.8049322352)
arrSample: Array[(String, (Double, Double, Int))] = Array()
Step 5:
iterTimes: Int = 10
Loop 1:
Loop 2:
Loop 3:
Loop 4:
Loop 5:
Loop 6:
Loop 7:
Loop 8:
Loop 9:
Loop 10:
Step 6:
import org.apache.spark.rdd.RDD
rddSample: org.apache.spark.rdd.RDD[(String, (Double, Double, Int))] = ParallelCollectionRDD[49] at parallelize at <console>:30
rddSampleReduced: org.apache.spark.rdd.RDD[(String, (Double, Double, Int))] = ShuffledRDD[50] at reduceByKey at <console>:32
rddSampleAvg: org.apache.spark.rdd.RDD[(String, (Double, Double))] = MapPartitionsRDD[51] at map at <console>:34
(UK,(3.972326877018,2.0328463286359795E-4))
(Belgium,(3.9153832004865556,0.009043953191128136))
(Canada,(4.861657613299259,1.8457588039871842E-4))
(Japan,(4.667082624710397,0.2350488234336489))
(Greece,(4.938336883151666,0.03521915301849919))
(Italy,(3.5967923191606674,0.024658821259329236))
(France,(3.7904471918549993,3.669812562880062E-4))
(Switzerland,(4.22533560008125,0.005211687804950675))
(Netherlands,(4.150647548558289,0.0936809734263072))
(USA,(4.835488076306825,1.8013050816272284E-4))
(Germany,(3.8753055046537783,2.242474989739657E-4))
(Spain,(3.9961112136440713,0.05205925190781606))
(Ireland,(4.216567683236278,8.683368702612122E-4))
(Sweden,(4.007631537691428,4.1095938197838004E-4))
(Norway,(4.108714970575001,0.0033456736307958404))
(Denmark,(4.104850531724607,0.005835529775376007))
(Turkey,(5.7097692051339095,0.08049557813875488))
(Austria,(4.030921287369381,0.0024978812403829115))


scala> 

